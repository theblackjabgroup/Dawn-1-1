{%- style -%}
.section-{{ section.id }}-padding {
  padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
  padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
}

@media screen and (min-width: 750px) {
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top }}px;
    padding-bottom: {{ section.settings.padding_bottom }}px;
  }
}

.container {
  perspective: 1000px; /* For the 3D effect */
  max-width: 1200px;
  margin: 0 auto;
  position: relative;
}

.cards {
  width: 100%;  /* Video fits full width */
  height: 100%; /* Video fits full height */
  background-color: white;
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
  border-radius: 10px;
  transition: transform 0.1s ease-out;
  transform-style: preserve-3d;
  transform-origin: center;
  will-change: transform;
}

.play-pause-btn {
  position: absolute;
  top: 20px;
  right: 20px;
  z-index: 10;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  border: none;
  padding: 10px;
  border-radius: 50%;
  cursor: pointer;
}

.play-pause-btn:hover {
  background-color: rgba(0, 0, 0, 0.9);
}

.play-pause-btn i {
  font-size: 16px;
  color: white;
}

.cards video {
  width: 100%;
  height: 100%;
  border-radius: 10px;
  object-fit: cover;
}

{%- endstyle -%}


<div class="color-{{ section.settings.color_scheme }} gradient">
  <div class="video-section isolate section-{{ section.id }}-padding">
    <div>
      {%- unless section.settings.heading == blank -%}
        <div class="title-wrapper title-wrapper--no-top-margin">
          <h2 class="title inline-richtext {{ section.settings.heading_size }}">{{ section.settings.heading }}</h2>
        </div>
      {%- endunless -%}
    </div>

<section class="video-section">
  <div class="video-container container">
    <button id="play-pause-btn" class="play-pause-btn">
      <i class="fas fa-pause"></i> <!-- Icon instead of text -->
    </button>
    <video id="autoplay-video" class="cards video" autoplay muted loop>
      {% if section.settings.video_file != blank %}
        <source src="{{ section.settings.video_file | video_url }}" type="video/mp4">
      {% elsif section.settings.video_url != blank %}
        <source src="{{ section.settings.video_url }}" type="video/mp4">
      {% else %}
        <p>Your browser does not support the video tag.</p>
      {% endif %}
    </video>
  </div>
</section>

<!-- Add FontAwesome link for icons -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">

<script>
  
const video = document.getElementById('autoplay-video');
const playPauseBtn = document.getElementById('play-pause-btn');
const icon = playPauseBtn.querySelector('i');

// Play/Pause button functionality
playPauseBtn.addEventListener('click', () => {
  if (video.paused) {
    video.play();
    icon.classList.remove('fa-play');
    icon.classList.add('fa-pause');
  } else {
    video.pause();
    icon.classList.remove('fa-pause');
    icon.classList.add('fa-play');
  }
});

// Get the size of the card and container
const card = document.querySelector('.cards');
const container = document.querySelector('.container');
let lastXRotate = 0; // Variable to store the last X-axis rotation

// Add a scroll event listener
window.addEventListener('scroll', () => {
  const rect = container.getBoundingClientRect();

  // Calculate the percentage of the card in the viewport
  const scrollPos = window.scrollY;
  const containerTop = container.offsetTop;
  const containerHeight = container.offsetHeight;

  // Adjust card rotation if visible in the viewport
  if (scrollPos >= containerTop && scrollPos <= containerTop + containerHeight) {
    const yPos = (scrollPos - containerTop) / containerHeight;
    const xRotate = (yPos - 0.5) * -40; // Adjust tilt intensity here
    lastXRotate = xRotate;
    card.style.transform = `rotateX(${xRotate}deg)`;
  }

  // Reset rotation when the card is out of view
  if (rect.top > window.innerHeight || rect.bottom < 0) {
    card.style.transform = 'rotateX(0deg)';
    lastXRotate = 0;
  }
});

</script>

{% schema %}
{
  "name": "t:sections.video.name",
  "tag": "section",
  "class": "video-section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "inline_richtext",
      "id": "heading",
      "default": "t:sections.video.settings.heading.default",
      "label": "t:sections.video.settings.heading.label"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        },
        {
          "value": "hxl",
          "label": "t:sections.all.heading_size.options__4.label"
        },
        {
          "value": "hxxl",
          "label": "t:sections.all.heading_size.options__5.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "checkbox",
      "id": "enable_video_looping",
      "label": "t:sections.video.settings.enable_video_looping.label",
      "default": false
    },
    {
      "type": "header",
      "content": "t:sections.video.settings.header__1.content"
    },
    {
      "type": "video",
      "id": "video",
      "label": "t:sections.video.settings.video.label"
    },
    {
      "type": "header",
      "content": "t:sections.video.settings.header__2.content"
    },
    {
      "type": "paragraph",
      "content": "t:sections.video.settings.paragraph.content"
    },
    {
      "type": "video_url",
      "id": "video_url",
      "accept": ["youtube", "vimeo"],
      "default": "https://www.youtube.com/watch?v=_9VUPq3SxOc",
      "label": "t:sections.video.settings.video_url.label", 
      "info": "t:sections.video.settings.video_url.info"
    },
    {
      "type": "image_picker",
      "id": "cover_image",
      "label": "t:sections.video.settings.cover_image.label"
    },
    {
      "type": "text",
      "id": "description",
      "label": "t:sections.video.settings.description.label",
      "info": "t:sections.video.settings.description.info"
    },
    {
      "type": "header",
      "content": "t:sections.video.settings.header__3.content"
    },
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "t:sections.video.settings.full_width.label",
      "default": false
    },
    {
      "type": "range",
      "id": "padding_top",
      "label": "t:sections.all.padding_top.label",
      "min": 0,
      "max": 100,
      "unit": "px",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "label": "t:sections.all.padding_bottom.label",
      "min": 0,
      "max": 100,
      "unit": "px",
      "default": 36
    },
    {
      "type": "select",
      "id": "color_scheme",
      "label": "t:sections.all.color_scheme.label",
      "options": [
        {
          "value": "background-1",
          "label": "t:sections.all.color_scheme.options__1.label"
        },
        {
          "value": "background-2",
          "label": "t:sections.all.color_scheme.options__2.label"
        },
        {
          "value": "background-3",
          "label": "t:sections.all.color_scheme.options__3.label"
        },
        {
          "value": "inverse",
          "label": "t:sections.all.color_scheme.options__4.label"
        }
      ],
      "default": "background-1"
    }
  ],
  "presets": [
    {
      "name": "Default video section",
      "category": "t:sections.video.presets.category"
    }
  ]
}
{% endschema %}
